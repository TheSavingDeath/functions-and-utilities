--these can be minified further, they have variable names that they don't need.

--DELTA
--DELTA unminified
function delta(var,spot)
  if not deltaTable then
    deltaTable = {}
    deltaTable[spot] = {oldVar = 0,deltaVar = 0}
  elseif not deltaTable[spot] then
    deltaTable[spot] = {oldVar = 0,deltaVar = 0}
  end
    deltaTable[spot].deltaVar = var - deltaTable[spot].oldVar
    deltaTable[spot].oldVar = var

  return deltaTable[spot].deltaVar
end

--DELTA minified
function delta(var,name)if not a then a={}a[name]={oldVar=0,deltaVar=0}elseif not a[name]then a[name]={oldVar=0,deltaVar=0}end;a[name].deltaVar=var-a[name].oldVar;a[name].oldVar=var;return a[name].deltaVar end

--DELTA example (for Pony IDE) sidenote uhh its doing something weird with float imprecision.. dunno what thats about.
ign = input.getNumber
function onTick()
	print(delta(ign(1),"one"))
	print(delta(ign(2),"two"))
end

--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Next

--PULSE
--PULSE unminified
function pulse(var,spot)
  if not pulseTable then
    pulseTable = {}
    pulseTable[spot] = {pulse = false,touch = false}
  elseif not pulseTable[spot] then
    pulseTable[spot] = {pulse = false,touch = false}
  end
  pulseTable[spot].pulse = var ~= pulseTable[spot].touch and var
  pulseTable[spot].touch = var
  return pulseTable[spot].pulse
end

--PULSE minified
function pulse(var,name)if not a then a={}a[name]={pulse=false,touch=false}elseif not a[name]then a[name]={pulse=false,touch=false}end;a[name].pulse=var~=a[name].touch and var;a[name].touch=var;return a[name].pulse end

--PULSE example (for Pony IDE)
ign = input.getBool
function onTick()
    if pulse(ign(1),"one") then
        print("pulse 1")
    end
    if pulse(ign(2),"two") then
        print("pulse 2")
    end
end

--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Next

--PID
--PID unminified
function pid(setpoint,processVar,tunes,spot)
    if not pidTable then
        pidTable = {}
        pidTable[spot] = {error=0,integral=0,derivative=0,errorPrior=0,integralPrior=0}
    elseif not pidTable[spot] then
        pidTable[spot] = {error=0,integral=0,derivative=0,errorPrior=0,integralPrior=0}
    end
    pidTable[spot].error = setpoint - processVar
    pidTable[spot].integral = pidTable[spot].integralPrior + pidTable[spot].error
    pidTable[spot].derivative = pidTable[spot].error - pidTable[spot].errorPrior
    
    pidTable[spot].controlOutput = tunes.p * pidTable[spot].error + tunes.i * pidTable[spot].integral + tunes.d * pidTable[spot].derivative
    
    pidTable[spot].errorPrior = pidTable[spot].error
    pidTable[spot].integralPrior = pidTable[spot].integral
    
    return pidTable[spot].controlOutput
end

--PID minified

--PID example (for Pony IDE)

--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Next

--BEEPER
--BEEPER unminified
function beep(bool,ticks,spot)
	if not beepTable then
		beepTable = {}
		beepTable[spot] = {i=0}
	elseif not beepTable[spot] then
		beepTable[spot] = {i=0}
	end
	if bool then
		if beepTable[spot].i > ticks then
			beepTable[spot].i = 0
			return true
		else
			beepTable[spot].i = beepTable[spot].i + 1
			return false
		end
	else
		beepTable[spot].i = 0
		return false
	end
end

--BEEPER minified


--BEEPER example (for Pony IDE)
ign,pgn = input.getNumber,property.getNumber
function onTick()
	if beep(true,30,"one") then
		print("beep 1")
	end
	if beep(true,40,"two") then
		print("beep 2")
	end
end

--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Next

--DELAY
--DELAY unminified
function delay(bool,ticks,spot)
	if not delayTable then
		delayTable = {}
		delayTable[spot] = {i=0}
	elseif not delayTable[spot] then
		delayTable[spot] = {i=0}
	end
	if bool then
		if (delayTable[spot].i > ticks) then
			return true
		else
			delayTable[spot].i = delayTable[spot].i + 1
			return false
		end
	else
		delayTable[spot].i = 0
	end
end

--DELAY minified


--DELAY example (for Pony IDE)
ign,pgn = input.getNumber,property.getNumber
function onTick()
	if delay(true,30,"runar") then
		print("delay 1 done")
	end
	if delay(true,40,"anne") then
		print("delay 2 done")
	end
end

--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Next

--CAPACITOR
--CAPACITOR unminified
function capacitor(bool,chargeTicks,dischargeTicks,spot)
	if not delayTable then
		delayTable = {}
		delayTable[spot] = {i1=0,i2=0}
	elseif not delayTable[spot] then
		delayTable[spot] = {i1=0,i2=0}
	end
	if bool then
		if delayTable[spot].i1 >= chargeTicks then
			delayTable[spot].i2 = dischargeTicks
			return true
		else
			delayTable[spot].i1 = delayTable[spot].i1 + 1
			return false
		end
	else
		if delayTable[spot].i2 == 0 then
			return false
		else
			delayTable[spot].i2 = delayTable[spot].i2 - 1
			return true
		end
	end
end

--CAPACITOR minified


--CAPACITOR example (for Pony IDE)
igb,pgn = input.getBool,property.getNumber
function onTick()
	if capacitor(igb(1),0,3,"runar") then
		print("1 true")
	end
	if capacitor(igb(2),0,4,"anne") then
		print("2 true")
	end
end

--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Next

--ADVANCED DELTA
--ADVANCED DELTA unminified
function deltaAdv(c,b,n)
	if not a then
		a={} a[b]={}
		a[b].deltaVar=0
		a[b].last={}
		for i=1,100 do
			a[b].last[i]=0
		end
	elseif not a[b] then
		a[b]={}
		a[b].deltaVar=0
		a[b].last={}
		for i=1,100 do
			a[b].last[i]=0
		end
	end
	a[b].deltaVar=(c-a[b].last[n])/n
	for i=100,2,-1 do
		a[b].last[i]=a[b].last[i-1]
	end
	a[b].last[1]=c
	return a[b].deltaVar
end

--ADVANCED DELTA minified
function deltaAdv(c,b,n)if not a then a={} a[b]={} a[b].deltaVar=0 a[b].last={} for i=1,100 do a[b].last[i]=0 end elseif not a[b] then a[b]={} a[b].deltaVar=0 a[b].last={} for i=1,100 do a[b].last[i]=0 end end a[b].deltaVar=(c-a[b].last[n])/n for i=100,2,-1 do a[b].last[i]=a[b].last[i-1] end a[b].last[1]=c return a[b].deltaVar end

--example (for Pony IDE)
howManyTicksBackInTime = 5
x = x + 1
print(deltaAdv(x, "customKey", howManyTicksBackInTime)) --prints: 1
y = y + 0.69
print(deltaAdv(y, "customKey2", howManyTicksBackInTime)) --prints: 0.69

--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Next

--
-- unminified


-- minified


-- example (for Pony IDE)
